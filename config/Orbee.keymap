#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define MOUSE 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        backslash: backslash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp 0x89>;
            label = "BACKSLASH";
        };

        pipe: pipe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(0x89)>;
            label = "PIPE";
        };

        under: under {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(0x87)>;
            label = "UNDER";
        };

        JP_on: JP_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &kp INT_HENKAN>;
            label = "JP_ON";
        };

        JP_off: JP_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &kp INT_MUHENKAN>, <&macro_press>;

            label = "JP_OFF";
        };
    };

    behaviors {
        touch_behavior_1: touch1 {
            compatible = "zmk,behavior-momentary";
            label = "TouchKey1";
            bindings = <&kp A>;
        };

        touch_behavior_2: touch2 {
            compatible = "zmk,behavior-momentary";
            label = "TouchKey2";
            bindings = <&kp B>;
        };

        touch_behavior_3: touch3 {
            compatible = "zmk,behavior-momentary";
            label = "TouchKey3";
            bindings = <&mo 1>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // Mouse controls

        combo_left_click {
            key-positions = <6 18>; // y c
            bindings = <&mkp LCLK>;
        };

        combo_right_click {
            key-positions = <20 8>; // y m
            bindings = <&mkp RCLK>;
        };

        combo_middle_click {
            key-positions = <7 19>; // c y m
            bindings = <&mkp MCLK>;
        };

        combo_back {
            key-positions = <6 7>; // c v
            bindings = <&mkp MB4>;
        };

        combo_forward {
            key-positions = <8 7>; // m x
            bindings = <&mkp MB5>;
        };

        // Symbol combos based on default_layer layout

        combo_quote_double {
            key-positions = <1 3 2>; // l ,p
            bindings = <&kp AT>; // " in JP keyboard
        };

        combo_grave {
            key-positions = <1 2>; // l ,
            bindings = <&kp LBRC>; // ` in JP keyboard
        };

        combo_quote_single {
            key-positions = <2 3>; // , p
            bindings = <&kp AMPS>; // ' in JP keyboard
        };

        combo_hash {
            key-positions = <0 10>; // Esc l
            bindings = <&kp HASH>;
        };

        combo_semicolon {
            key-positions = <2 12>; // , e
            bindings = <&kp SEMI>;
        };

        combo_pipe {
            key-positions = <3 13>; // p n
            bindings = <&pipe>;
        };

        combo_colon {
            key-positions = <4 14>; // . b
            bindings = <&kp SQT>; // : in JP keyboard
        };

        combo_underscore {
            key-positions = <25 26>; // h j
            bindings = <&under>;
        };

        combo_minus {
            key-positions = <13 14>; // n b
            bindings = <&kp MINUS>;
        };

        combo_equal {
            key-positions = <3 4>; // p .
            bindings = <&kp UNDERSCORE>; // = in JP keyboard
        };

        combo_plus {
            key-positions = <35 37 24>; // left up down
            bindings = <&kp COLON>; // + in JP keyboard
        };

        combo_asterisk {
            key-positions = <23 12 25>; // w e h
            bindings = <&kp DQT>; // * in JP keyboard
        };

        combo_caret {
            key-positions = <11 2 13>; // r , n
            bindings = <&kp EQUAL>; // ^ in JP keyboard
        };

        combo_slash {
            key-positions = <11 2>; // r ,
            bindings = <&kp SLASH>;
        };

        combo_backslash {
            key-positions = <2 13>; // , n
            bindings = <&backslash>;
        };

        combo_paren_left {
            key-positions = <0 1>; // f u
            bindings = <&mt LPAR ASTRK>; // ( in JP keyboard
        };

        combo_paren_right {
            key-positions = <0 1 2>; // f u d
            bindings = <&kp LPAR>; // ) in JP keyboard
        };

        combo_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <3 30 20>;
        };

        combo_amps {
            bindings = <&kp CARET>;
            key-positions = <10 13 8>;
        };

        combo_at {
            bindings = <&kp LBKT>;
            key-positions = <10 20 32>;
        };

        combo_dllr {
            bindings = <&kp DLLR>;
            key-positions = <1 11 8>;
        };

        combo_henkan {
            bindings = <&JP_on>;
            key-positions = <40 41>;
        };

        combo_muhenkan {
            bindings = <&JP_off>;
            key-positions = <39 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT {
            bindings = <
&kp ESC           &mt PLUS L   &kp COMMA  &kp P      &kp DOT                          &kp DEL      &kp F  &kp U  &lt 3 D      &kp K
&kp A             &kp R        &kp E      &kp N      &kp B     &none        &kp RBKT  &kp G        &kp S  &kp I  &kp T        &kp O
&mt LEFT_SHIFT Z  &mt LCTRL W  &kp UP     &kp H      &kp J     &kp TAB      &kp BSLH  &kp V        &kp C  &kp Y  &mt RCTRL M  &mt RSHIFT X
&kp LGUI          &kp LEFT     &kp DOWN   &kp RIGHT  &kp LALT  &kp SPACE    &kp BSPC  &lt 2 ENTER                             &kp BSPC
            >;

            sensor-bindings =
                <&scroll_up_down>,
                <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        JP_Arensito {
            bindings = <
&trans  &mt PLUS MINUS  &trans  &trans  &trans                    &trans  &trans   &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans    &trans  &trans  &trans   &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans    &trans  &trans  &mt C K  &trans  &trans  &trans
&trans  &trans          &trans  &trans  &trans  &trans    &trans  &trans                           &trans
            >;
        };

        MOVE {
            bindings = <
&mt LS(Q) Q  &kp Q      &trans     &trans     &trans                             &trans      &mt F7 N7  &mt F8 N8  &mt F9 N9  &mt F12 QMARK
&kp TILDE    &mt F4 N4  &mt F5 N5  &mt F6 N6  &mt F11 N0    &trans     &trans    &mt F10 N0  &mt F4 N4  &mt F5 N5  &mt F6 N6  &mt F11 EXCL
&kp LS(Z)    &mt F1 N1  &kp PG_UP  &mt F3 N3  &mt F10 EXCL  &trans     &kp BSPC  &kp DEL     &mt F1 N1  &mt F2 N2  &mt F3 N3  &mt F10 PLUS
&trans       &kp HOME   &kp PG_DN  &kp END    &trans        &JP_off    &JP_on    &JP_on                                       &trans
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        MOUSE {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans     &trans     &trans     &trans  &trans
&trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans                                   &trans
            >;
        };
    };
};
